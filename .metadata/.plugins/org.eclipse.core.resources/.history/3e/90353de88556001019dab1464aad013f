package com.example.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private CustomLogoutHandler customLogoutHandler;

    @Autowired
    public void setCustomLogoutHandler(CustomLogoutHandler customLogoutHandler) {
        this.customLogoutHandler = customLogoutHandler;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }
    private CustomSuccessHandler customSuccessHandler;

    @Autowired
    public void setCustomSuccessHandler(CustomSuccessHandler customSuccessHandler) {
        this.customSuccessHandler = customSuccessHandler;
    }


    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
            		.requestMatchers("/admin/**").hasRole("ADMIN")

                .anyRequest().permitAll()
            )
            .formLogin(form -> form
                    .loginPage("/login")                        // âœ… your custom login form
                    .loginProcessingUrl("/dologin")             // âœ… Spring handles this automatically
                    .successHandler(CustomSuccessHandler)       // âœ… redirects based on role
                    .permitAll()
                )
            
            
            
            
            // ðŸ”¥ Disable default Spring login form
            .logout(logout -> logout
                .logoutUrl("/dologout")
                .logoutSuccessUrl("/login")
                .addLogoutHandler(customLogoutHandler)
            );

        return http.build();
    }
}
